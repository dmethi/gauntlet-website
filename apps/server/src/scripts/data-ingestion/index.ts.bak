import { PrismaClient } from '../../generated/prisma';
import { createLogger } from './logger';
import { createAPI } from './api';
import { DEFAULT_OPTIONS, TEST_LEAGUE_ID, toPrismaJson } from './config';
import type { IngestionContext, IngestionOptions, IngestionStats } from './types';

const prisma = new PrismaClient();
const logger = createLogger();
const api = createAPI(logger);

async function ingestLeague(ctx: IngestionContext) {
  const { leagueId } = ctx.options;
  logger.info(`Ingesting league data for ${leagueId}`);

  const league = await api.getLeague(leagueId);
  await prisma.league.upsert({
    where: { id: league.league_id },
    update: {
      name: league.name,
      season: league.season,
      seasonType: league.season_type,
      status: league.status,
      sport: league.sport,
      totalRosters: league.total_rosters,
      settings: toPrismaJson(league.settings),
      scoringSettings: toPrismaJson(league.scoring_settings),
      rosterPositions: league.roster_positions,
      metadata: toPrismaJson(league.metadata),
      previousLeagueId: league.previous_league_id,
      draftId: league.draft_id,
    },
    create: {
      id: league.league_id,
      name: league.name,
      season: league.season,
      seasonType: league.season_type,
      status: league.status,
      sport: league.sport,
      totalRosters: league.total_rosters,
      settings: toPrismaJson(league.settings),
      scoringSettings: toPrismaJson(league.scoring_settings),
      rosterPositions: league.roster_positions,
      metadata: toPrismaJson(league.metadata),
      previousLeagueId: league.previous_league_id,
      draftId: league.draft_id,
    },
  });

  return league;
}

async function ingestUsers(ctx: IngestionContext) {
  const { leagueId } = ctx.options;
  logger.info(`Ingesting users for league ${leagueId}`);

  const users = await api.getUsers(leagueId);
  await Promise.all(
    users.map(user =>
      prisma.user.upsert({
        where: { id: user.user_id },
        update: {
          username: user.username || user.display_name.toLowerCase(),
          displayName: user.display_name,
          avatar: user.avatar,
          metadata: toPrismaJson(user.metadata),
          isBot: user.is_bot,
        },
        create: {
          id: user.user_id,
          username: user.username || user.display_name.toLowerCase(),
          displayName: user.display_name,
          avatar: user.avatar,
          metadata: toPrismaJson(user.metadata),
          isBot: user.is_bot,
        },
      })
    )
  );
}

async function ingestRosters(ctx: IngestionContext) {
  const { leagueId } = ctx.options;
  logger.info(`Ingesting rosters for league ${leagueId}`);

  const rosters = await api.getRosters(leagueId);
  await Promise.all(
    rosters.map(async roster => {
      const rosterData = {
        leagueId: roster.league_id,
        ownerId: roster.owner_id,
        players: roster.players || [],
        starters: roster.starters || [],
        reserve: roster.reserve || [],
        settings: toPrismaJson(roster.settings) as Prisma.JsonValue,
        metadata: toPrismaJson(roster.metadata),
        league: {
          connect: { id: roster.league_id },
        },
      };

      return prisma.roster.upsert({
        where: { id: roster.roster_id },
        update: rosterData,
        create: {
          id: roster.roster_id,
          ...rosterData,
        },
      });
    })
  );
}

async function ingestMatchups(ctx: IngestionContext, week: number) {
  const { leagueId } = ctx.options;
  logger.info(`Ingesting matchups for league ${leagueId} week ${week}`);

  const matchups = await api.getMatchups(leagueId, week);
  await Promise.all(
    matchups.map(matchup =>
      prisma.matchup.upsert({
        where: {
          leagueId_week_rosterId: {
            leagueId,
            week,
            rosterId: matchup.roster_id,
          },
        },
        update: {
          matchupId: matchup.matchup_id,
          points: matchup.points,
          customPoints: matchup.custom_points,
          starters: matchup.starters,
          startersPoints: toPrismaJson(matchup.starters_points),
          players: matchup.players,
          playersPoints: toPrismaJson(matchup.players_points),
        },
        create: {
          id: `${leagueId}-${week}-${matchup.roster_id}`,
          leagueId,
          week,
          rosterId: matchup.roster_id,
          matchupId: matchup.matchup_id,
          points: matchup.points,
          customPoints: matchup.custom_points,
          starters: matchup.starters,
          startersPoints: toPrismaJson(matchup.starters_points),
          players: matchup.players,
          playersPoints: toPrismaJson(matchup.players_points),
        },
      })
    )
  );
}

async function ingestPlayers(ctx: IngestionContext) {
  logger.info('Ingesting all NFL players');

  const players = await api.getAllPlayers();
  await Promise.all(
    Object.entries(players).map(([id, player]) =>
      prisma.player.upsert({
        where: { id },
        update: {
          hashtag: player.hashtag,
          firstName: player.first_name,
          lastName: player.last_name,
          fullName: player.full_name,
          team: player.team,
          position: player.position,
          depthChartOrder: player.depth_chart_order,
          status: player.status,
          injuryStatus: player.injury_status,
          weight: player.weight,
          height: player.height,
          number: player.number,
          age: player.age,
          yearsExp: player.years_exp,
        },
        create: {
          id,
          hashtag: player.hashtag,
          firstName: player.first_name,
          lastName: player.last_name,
          fullName: player.full_name,
          team: player.team,
          position: player.position,
          depthChartOrder: player.depth_chart_order,
          status: player.status,
          injuryStatus: player.injury_status,
          weight: player.weight,
          height: player.height,
          number: player.number,
          age: player.age,
          yearsExp: player.years_exp,
        },
      })
    )
  );
}

async function ingestDraft(ctx: IngestionContext, draftId: string) {
  logger.info(`Ingesting draft ${draftId}`);

  const draft = await api.getDraft(draftId);
  await prisma.draft.upsert({
    where: { id: draft.draft_id },
    update: {
      leagueId: draft.league_id,
      status: draft.status,
      type: draft.type,
      season: draft.season,
      settings: toPrismaJson(draft.settings),
      metadata: toPrismaJson(draft.metadata),
      slotToRosterId: draft.slot_to_roster_id,
    },
    create: {
      id: draft.draft_id,
      leagueId: draft.league_id,
      status: draft.status,
      type: draft.type,
      season: draft.season,
      settings: toPrismaJson(draft.settings),
      metadata: toPrismaJson(draft.metadata),
      slotToRosterId: draft.slot_to_roster_id,
    },
  });

  const picks = await api.getDraftPicks(draftId);
  await Promise.all(
    picks.map(pick =>
      prisma.draftPick.upsert({
        where: {
          draftId_pickNo: {
            draftId: pick.draft_id,
            pickNo: pick.pick_no,
          },
        },
        update: {
          round: pick.round,
          rosterId: pick.roster_id,
          playerId: pick.player_id,
          pickedBy: pick.picked_by,
          metadata: toPrismaJson(pick.metadata),
          isKeeper: pick.is_keeper,
        },
        create: {
          id: `${pick.draft_id}-${pick.pick_no}`,
          draftId: pick.draft_id,
          pickNo: pick.pick_no,
          round: pick.round,
          rosterId: pick.roster_id,
          playerId: pick.player_id,
          pickedBy: pick.picked_by,
          metadata: toPrismaJson(pick.metadata),
          isKeeper: pick.is_keeper,
        },
      })
    )
  );
}

async function ingestTransactions(ctx: IngestionContext, week: number) {
  const { leagueId } = ctx.options;
  logger.info(`Ingesting transactions for league ${leagueId} week ${week}`);

  const transactions = await api.getTransactions(leagueId, week);
  await Promise.all(
    transactions.map(tx =>
      prisma.transaction.upsert({
        where: { id: tx.transaction_id },
        update: {
          leagueId,
          type: tx.type,
          status: tx.status,
          creatorId: tx.creator,
          rosterIds: tx.roster_ids,
          adds: toPrismaJson(tx.adds),
          drops: toPrismaJson(tx.drops),
          draftPicks: toPrismaJson(tx.draft_picks),
          waiver: toPrismaJson(tx.waiver_budget),
          settings: toPrismaJson(tx.settings),
          leg: tx.leg,
          consenterIds: tx.consenter_ids,
        },
        create: {
          id: tx.transaction_id,
          leagueId,
          type: tx.type,
          status: tx.status,
          creatorId: tx.creator,
          rosterIds: tx.roster_ids,
          adds: toPrismaJson(tx.adds),
          drops: toPrismaJson(tx.drops),
          draftPicks: toPrismaJson(tx.draft_picks),
          waiver: toPrismaJson(tx.waiver_budget),
          settings: toPrismaJson(tx.settings),
          leg: tx.leg,
          consenterIds: tx.consenter_ids,
        },
      })
    )
  );
}

async function ingestAll(options: Partial<IngestionOptions> = {}) {
  const ctx: IngestionContext = {
    stats: {
      startTime: new Date(),
      totalProcessed: 0,
      successCount: 0,
      errorCount: 0,
      errors: [],
    },
    options: {
      ...DEFAULT_OPTIONS,
      ...options,
      leagueId: options.leagueId || TEST_LEAGUE_ID,
    },
    logger,
  };

  try {
    logger.info('Starting data ingestion...');
    logger.warn('WARNING: This is test data and should not be used in production!');

    // Ingest league data
    const league = await ingestLeague(ctx);
    ctx.stats.successCount++;

    // Ingest users
    await ingestUsers(ctx);
    ctx.stats.successCount++;

    // Ingest rosters
    await ingestRosters(ctx);
    ctx.stats.successCount++;

    // Ingest players
    await ingestPlayers(ctx);
    ctx.stats.successCount++;

    // Ingest matchups for all weeks
    for (const week of ctx.options.weeks || []) {
      await ingestMatchups(ctx, week);
      ctx.stats.successCount++;
    }

    // Ingest draft data if available
    if (league.draft_id) {
      await ingestDraft(ctx, league.draft_id);
      ctx.stats.successCount++;
    }

    // Ingest transactions for all weeks
    for (const week of ctx.options.weeks || []) {
      await ingestTransactions(ctx, week);
      ctx.stats.successCount++;
    }

    ctx.stats.endTime = new Date();
    logger.info('Data ingestion completed successfully!', {
      duration: ctx.stats.endTime.getTime() - ctx.stats.startTime.getTime(),
      successCount: ctx.stats.successCount,
      errorCount: ctx.stats.errorCount,
    });
  } catch (error) {
    ctx.stats.errorCount++;
    ctx.stats.errors.push(error as Error);
    logger.error('Error during data ingestion', error as Error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }

  return ctx.stats;
}

// Run the ingestion if called directly
if (require.main === module) {
  ingestAll().catch(error => {
    console.error('Fatal error:', error);
    process.exit(1);
  });
}

export { ingestAll };
